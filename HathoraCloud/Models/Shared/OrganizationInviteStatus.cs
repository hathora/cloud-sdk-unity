
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace HathoraCloud.Models.Shared
{
    using HathoraCloud.Models.Shared;
    using HathoraCloud.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Numerics;
    using System;
    using UnityEngine;
    

    public class OrganizationInviteStatusType
    {
        private OrganizationInviteStatusType(string value) { Value = value; }

        public string Value { get; private set; }
        public static OrganizationInviteStatusType InviteStatusPending { get { return new OrganizationInviteStatusType("InviteStatusPending"); } }
        public static OrganizationInviteStatusType InviteStatusAccepted { get { return new OrganizationInviteStatusType("InviteStatusAccepted"); } }
        public static OrganizationInviteStatusType InviteStatusRejected { get { return new OrganizationInviteStatusType("InviteStatusRejected"); } }
        public static OrganizationInviteStatusType InviteStatusRescinded { get { return new OrganizationInviteStatusType("InviteStatusRescinded"); } }
        public static OrganizationInviteStatusType Null { get { return new OrganizationInviteStatusType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OrganizationInviteStatusType v) { return v.Value; }
        public static OrganizationInviteStatusType FromString(string v) {
            switch(v) {
                case "InviteStatusPending": return InviteStatusPending;
                case "InviteStatusAccepted": return InviteStatusAccepted;
                case "InviteStatusRejected": return InviteStatusRejected;
                case "InviteStatusRescinded": return InviteStatusRescinded;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OrganizationInviteStatusType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OrganizationInviteStatusType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(OrganizationInviteStatus.OrganizationInviteStatusConverter))]
    public class OrganizationInviteStatus {
        public OrganizationInviteStatus(OrganizationInviteStatusType type) {
            Type = type;
        }
        public InviteStatusPending? InviteStatusPending { get; set; } 
        public InviteStatusAccepted? InviteStatusAccepted { get; set; } 
        public InviteStatusRejected? InviteStatusRejected { get; set; } 
        public InviteStatusRescinded? InviteStatusRescinded { get; set; } 

        public OrganizationInviteStatusType Type {get; set; }


        public static OrganizationInviteStatus CreateInviteStatusPending(InviteStatusPending inviteStatusPending) {
            OrganizationInviteStatusType typ = OrganizationInviteStatusType.InviteStatusPending;

            OrganizationInviteStatus res = new OrganizationInviteStatus(typ);
            res.InviteStatusPending = inviteStatusPending;
            return res;
        }

        public static OrganizationInviteStatus CreateInviteStatusAccepted(InviteStatusAccepted inviteStatusAccepted) {
            OrganizationInviteStatusType typ = OrganizationInviteStatusType.InviteStatusAccepted;

            OrganizationInviteStatus res = new OrganizationInviteStatus(typ);
            res.InviteStatusAccepted = inviteStatusAccepted;
            return res;
        }

        public static OrganizationInviteStatus CreateInviteStatusRejected(InviteStatusRejected inviteStatusRejected) {
            OrganizationInviteStatusType typ = OrganizationInviteStatusType.InviteStatusRejected;

            OrganizationInviteStatus res = new OrganizationInviteStatus(typ);
            res.InviteStatusRejected = inviteStatusRejected;
            return res;
        }

        public static OrganizationInviteStatus CreateInviteStatusRescinded(InviteStatusRescinded inviteStatusRescinded) {
            OrganizationInviteStatusType typ = OrganizationInviteStatusType.InviteStatusRescinded;

            OrganizationInviteStatus res = new OrganizationInviteStatus(typ);
            res.InviteStatusRescinded = inviteStatusRescinded;
            return res;
        }

        public static OrganizationInviteStatus CreateNull() {
            OrganizationInviteStatusType typ = OrganizationInviteStatusType.Null;
            return new OrganizationInviteStatus(typ);
        }

        public class OrganizationInviteStatusConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(OrganizationInviteStatus);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    InviteStatusPending? inviteStatusPending = JsonConvert.DeserializeObject<InviteStatusPending>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonDeserializers(typeof(InviteStatusPending))});
                    return new OrganizationInviteStatus(OrganizationInviteStatusType.InviteStatusPending) {
                        InviteStatusPending = inviteStatusPending
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    InviteStatusAccepted? inviteStatusAccepted = JsonConvert.DeserializeObject<InviteStatusAccepted>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonDeserializers(typeof(InviteStatusAccepted))});
                    return new OrganizationInviteStatus(OrganizationInviteStatusType.InviteStatusAccepted) {
                        InviteStatusAccepted = inviteStatusAccepted
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    InviteStatusRejected? inviteStatusRejected = JsonConvert.DeserializeObject<InviteStatusRejected>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonDeserializers(typeof(InviteStatusRejected))});
                    return new OrganizationInviteStatus(OrganizationInviteStatusType.InviteStatusRejected) {
                        InviteStatusRejected = inviteStatusRejected
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    InviteStatusRescinded? inviteStatusRescinded = JsonConvert.DeserializeObject<InviteStatusRescinded>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonDeserializers(typeof(InviteStatusRescinded))});
                    return new OrganizationInviteStatus(OrganizationInviteStatusType.InviteStatusRescinded) {
                        InviteStatusRescinded = inviteStatusRescinded
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                OrganizationInviteStatus res = (OrganizationInviteStatus)value;
                if (OrganizationInviteStatusType.FromString(res.Type).Equals(OrganizationInviteStatusType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.InviteStatusPending != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InviteStatusPending));
                    return;
                }
                if (res.InviteStatusAccepted != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InviteStatusAccepted));
                    return;
                }
                if (res.InviteStatusRejected != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InviteStatusRejected));
                    return;
                }
                if (res.InviteStatusRescinded != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InviteStatusRescinded));
                    return;
                }

            }
        }

    }

}